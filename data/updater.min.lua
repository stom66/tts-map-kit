function checkForUpdates(a,b,c,d)local e={asset=a,version=b,repo=c,timeout=d or 20,cache={xml,lua,json},loading={xml=true,lua=true,json=true}}local f="?"..math.floor(os.time())local g=e.repo..e.asset.."/"e.url={version=g.."version"..f,lua=g..e.asset..".lua"..f,xml=g..e.asset..".xml"..f,json=g..e.asset..".json"..f}local function h(i)local j=e.version;local k=e.asset;if i==j then log("Asset "..k.." is up-to-date: "..i)return false end;local l=string.match(i,"%d+")local m=string.match(j,"%d+")if l>m then log("Asset "..k.." needs to be updated from "..j.." to "..i)return true end;if l==m then local n=string.match(i,"%a+")or 0;local o=string.match(j,"%a+")or 0;if string.byte(n)>string.byte(o)then log("Asset "..k.." needs to be patched from "..j.." to "..i)return true end end;log("!#! Warning! asset "..k.." is a higher version than the repo")return false end;WebRequest.get(e.url.version,function(p)if h(p.text)then log("Updating "..e.asset.." to version "..p.text)for q,r in pairs(e.loading)do log("   ...fetching new "..q.." from repo")WebRequest.get(e.url[q],function(s)e.cache[q]=s.text;e.loading[q]=false end)end;Wait.condition(function()log("   ...new assets data loaded from repo")local t=JSON.decode(self.getJSON())t.XmlUI=e.cache.xml;t.LuaScript=e.cache.lua;for q,u in pairs(JSON.decode(e.cache.json))do if t[q]then for v,w in pairs(u)do t[q][v]=w end end end;log("   ...destroying self and creating a replacement")spawnObjectJSON({json=JSON.encode(t)})self.destruct()end,function()return not e.loading.lua and not e.loading.xml and not e.loading.json end,d,function()log("Unable to update asset "..a..", update timed out after "..d.." seconds")end)end end)end